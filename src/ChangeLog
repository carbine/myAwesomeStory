
2012-06-04 --:--:-- Gill <gmail gillemorris>
	todo:
	standardize state/reward function

	created Road/Intersect classes. haven't done much in the way of
	using them

	* Main.java: no longer manages half of LearnerModuleImpl's
	    implementation -- yay!

2012-06-04 15:43:31 Gill <gmail gillemorris>
	Updating a bunch of interfaces; hopefully reduce the complexity
	sufficiently that variable lanes, turning traffic, etc can be
	implemented reasonably easily.

	* interfaces/Car.java: 
	    - merged updateVelocity and updatePosition into move
	    - removed stopped and getChar

2012-06-04 12:18:38 Gill <gmail gillemorris>
	* Makefile: now uses restored package heirarchy

2012-06-03 20:37:51 Gill <gmail gillemorris>
	* Main.java: minor changes; can pass RL parameters in as arguments
	* interfaces/LearningModule.java: ""
	* LearningModuleImpl.java: "". Also reformatted the code and some
	    logic here and there. While some design aspects remain
	    questionable I change it further due to time constraints.
	    Unless something is suggested.

2012-06-03 --:--:-- Gill <gmail gillemorris>
	* CarImpl.java: stopped() now returns whether the car has zero
	   velocity (rather than zero position).
	* Main.java: now evaluates the success of the learning algorithm.

2012-06-03 6:03: -- Nathan
    *updated to have 4 traffic lights. this required some reworking of
     how we update car velocities as we don't want to move a car across
     an intersection when there is no room for it on the other side
    *a few other minor changes here and there to handle a larger map, etc
    *tried to implement turning cars but backed out before it got too
     complex. I don't think we should bother with implementing this - it
     requires quite a lot of fiddlyness to do and really adds very little
     value to the learning as our learning depends only on cars waiting,
     not on direction they could be turning

2012-06-03 04:36:-- Gill <gmail gillemorris>
	* Viewer.java: added some rudimentary error checking
	* RoadMapImp.java: catAt and roadAt no longer switch the axes.
	    also, decided we needed to follow convention in our definitions
	    of x-direction and y-direction or things would quickly become
	    unmaintainable.
	* interfaces/Car.java: removed duplicate functionality of getChar
	* interfaces/TrafficLight.java: clarified some specs; comments now
	    reflect its actual functionality
	* CarImpl.java: removed getChar; expanded slightly the logic of
		`stop' in `updateVelocity'
	* LearningModuleImpl.java: updated directional convention, and then
	    speculated on why there are so many 0 q-values.

2012-06-02 19:11:12 Gill <gmail gillemorris>
	* Viewer.java: now displays amber lights, intersection is
	    road-colored, cars are now rectangles not squares. -- i still
		intend to use arrows but they're currently buggy. i'll sleep
		on it
	* Main.java: vars runTime, quietTime, consoleOutput
	    now used appropriately
	* interfaces/TrafficLight.java: `clock' again has type void;
	    performing but a single function. the required expression 
	    for whether the light is about to change was 
	    `getDelay() == 1' - assuming i'm reading it correctly - 
	    which has no side effects
	* TrafficLightImpl.java: updated accordingly.
	* LearnerModuleImpl.java: tidied up updateTrafficLights slightly
	    - necessary because it treated TrafficLight.clock() as a
	    boolean. the intention is to eventually move 
	    RoadMap.stateCode() and all learner logic from Main into
	    LearnerModuleImpl.

2012-06-02 16:23:10 Gill <gmail gillemorris>
	Haven't read ChangeLog or implemented a bunch of stuff I wanted
	to; wanted to get these fixes pushed reasonably quicky.

	* interfaces/Car.java: provisionally features `car.getDirection'
	* CarImpl.java:        implements this
	* RoadMapImpl.java:    fixed bug where the bottom-right border
	                       of the map was considered a road
	* Viewer.java:         now produces sensible output given
	                       bidirectional traffic

2012-06-02 3:00 pm Nathan
	    -added dual lanes - basically only needed to modify the 'car.update velocity'
	    code to correctly sense it was approaching a traffic light, add some new road
	    entrances and our forethought in programming handled the rest.
	    -adding amber was very tricky because the fact that a switch was a delayed
	    action meant that the program couldn't 'learn' the results for several moves
	    down the track. required quite a bit of rearranging of the main logic
	Query: whoever made the substantial changes to Main and 
	interfaces - can you explain what you've done? I... hope
	everything still works. Though a brief inspection of the output
	indicates its learning quite well.
	    Also, can we take stateCode out of RoadMap? The value thus
	computed is basically useless to everything except
	LearnerModuleImpl.
	
        -I made the substantial changes, it was necessary because of the way I had to 
        do amber lights, see brief description above
        - by all means move it into learnermoduleimpl

2012-06-02 12:00 Nathan
	        query: "base method" being a method of Object/whatever else
	    that might be extended?
	    -Base method being the method in the interface that is actually called.
	    Our program should never be calling a method of an impl class, it should
	    be calling a method of eg RoadMap, which then redirects to the method in
	    whichever class that particular instance is

	* Main.java: started cleaning up some duplicated code. However
	             the only reason I actually submitted this modified
	             version is I accidently deleted the old one; so by
	             all means overwrite it in case of a conflict.

2012-06-02 13:24:05 Gill <gmail gillemorris>
	* Viewer.java: pretty colors

2012-06-02 08:30:32 Gill <gmail gillemorris>
	Query: whoever made the substantial changes to Main and 
	interfaces - can you explain what you've done? I... hope
	everything still works. Though a brief inspection of the output
	indicates its learning quite well.
	    Also, can we take stateCode out of RoadMap? The value thus
	computed is basically useless to everything except
	LearnerModuleImpl.

	* Viewer.java: exists. provides graphical output functionality.
	* Main.java: uses this functionality.
	* interfaces/RoadMap.java: features `boolean roadAt(Coords)'
	* RoadMapImpl.java: implements this.

2012-06-02 02:39:17 Gill <gmail gillemorris>
	@Nathan: 
	    re: gridSize: is it actually an interior field? you'd need
	    to know it if you ever want to say a traffic light is on a 
	    map; eg, Main.java:41. you could have a getter for a private
	    final int if you like, though i don't see what is to be
	    gained there.
	        the other possibilty is if we wanted the map size to be
	    either undefined or expandable (more probably the latter
	    given how we've currently decided to represent it). in that
	    case it could be useful having RoadMap give you a list of 
	    intersections? you'd also need a way of predicting the
	    effect of addCars, since RoadMap assumes it gets coordinates
	    {0<=x<40, 0<=y<40}.
	        i'll probably add the list of intersections when
	    graphics are done; any thoughts on addCars? also, any
	    thoughts on having not-necessarily-straight Roads?

	    re: overrides: another thing they convey is that they
	    override something. happy to leave them, as apparently
	    everyone does this. (aside: i can't help but be concerned
	    this is only the world doing what its IDE tells it to. and
	    not just with override)
	        query: "base method" being a method of Object/whatever
	    else that might be extended?

	* CarImpl.java: summarised our discussion, leaving code in the 
	                "counterintuitive" form; it works and we understand
	                it.

2012-06-01 10:41 pm Nathan
responding to changes below:
	- gave up adding "??" comments every time I saw an @Override
	  that didn't appear to override anything
	    -clarifying - @Override is placed there when I automatically generate these methods from the interface. (I can hit alt enter and my IDE creates them for me)
	                  You are correct, they are unnecessary in most cases, but my IDE places them there regardless, and it was easier for me to just leave them
	                  When I worked at atlassian this was also common practice because they do no harm and they do help convey that this method is not the base method.
	                  I believe (might be wrong) that doing this also helps to link this method to the base method in the interface for javadoc purposes (i know we arent
	                  doing javadocs but old habits die hard)
    - changed gridSize to be public final
        - why? I have always been taught that interior fields should not, as a rule, be made available publicly
    	    except through getters and setters
	- suggested renaming `removeIfOffRoad' but then did nothing
	  about it
	    - I have renamed this to 'hasLeftMap' - hopefully connotates the intention of the method a bit better

2012-06-01 03:38:32 Gill
	* Action.java: now exists

	* TrafficLight.java: added method `clock'

	* Main.java: adheres to the updated TrafficLight and 
	             LearnerModule interfaces.

	* LearningModule.java: started merging aforementioned code from 
	                       beth's TrafficLight into LearningModule.
	                       not finished so the new code is commented.

2012-06-01 01:00:00 Gill
	* .: clarification: from the first bit of code I read I 
	     concluded that for loops are written "for (T t : C)\n{". 

	* ChangeLog: now exists.

	* CarImpl.java:
	- changed position, velocity and direction to be private
	- removed the restriction that direction is 1 or -1
	- in function `updateVelocity':
	    - highlighted a quirk regarding 'horizontal' and
	      'vertical' but then did nothing about it
	    - reformatted so it fits on my screen
	    - changed the commentary somewhat
	- renamed `getPosition' to `getCoords' to be consistent with
	  class `TrafficLight'
	- suggested renaming `removeIfOffRoad' but then did nothing
	  about it

	* RoadMapImpl.java:
	- changed gridSize to be public final
	- defined private final char carChar = 'C'
	- added a defaultEntrances array
	    - modified code throughout file to use this 
	      appropriately
	- in function `print':
	    - reformatted so it fits on my screen
	    - changed bottom for loop to be consistent with the rest of
	      the project
	- minor reformatting to `addCars' and `nextNonCarSquare...'
	- gave up adding "??" comments every time I saw an @Override